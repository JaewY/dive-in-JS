# 7장 연산자

## 1. 산술연산자

### 단항 산술연산자

단항 산술연산자는 하나의 피연산자를 산술 연산하여 숫자 값을 만든다.
주의할 점은 이항 산술연산자와는 다르게 ++ -- 연산자는 피연산자의 값을 변경하는 기능이 있다.
따라서 어디에 위치하는 지가 결과값에 영향을 줄 수 있다.

```
let x = 5, result
result = x++
console.log(result,x) // 5,6
```
추가적으로 단항 연산자는 피연산자에 대한 효과가 없다.


## 3. 비교 연산자

==와 ===의 차이

==는 양 쪽의 값만을 확인하는 연산자이다.
1=="1"은 같은 값이라 true라고 나오는데, 이는 == 연산자가 양 쪽의 타입을 일치시킨 후(즉, string 값인 "1"을 number로 바꾼 후) 그 값을 비교하였기 때문이다.
반면에 === 연산자는 양 쪽의 타입까지 엄격하게 검사하는 연산자로, 위에서 == 연산자가 1="1"을 true라고 반환했다면 ===연산자는 false를 반환한다. 이유는 1은 number이고 "1"은 string이기 때문이다.

비슷하게, == 와 != 가 반대 개념이고, === 와 !== 가 반대 개념이 된다.
==와 != 은 예기치 않은 값을 반환할 때가 많아 사용이 권장되는 것은 아니다.

## 4. 삼항 조건 연산자

삼항 조건 연산자는 조건식의 결과에 따라 반환할 값을 결정하며, 이를 변수에 저장할 수 있다.

ex) const result = x+2 > 0 ? true : false

조건식 ? true : false
처음에는 조건식을 넣고, 값이 true라면 첫번째 값을 반환하고, false라면 두 번째 값을 반환한다.


## 8. typeof 연산자

null의 타입이 object로 나오는 것은 버그이지만, 현재와서 수정하기에는 기존의 코드에 미칠 영향이 너무 많아 수정되지 못하고 있다.

## 9. 지수 연산자
es7에서 업데이트 된 지수 연산자는
** 연산자를 통해 구현할 수 있다.

2**2 // 4
6**6 // 36

그 이전에는 Math.pow(a,b)로 사용하여,
Math(2,2) // 4
Math(3,2) // 9
